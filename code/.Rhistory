library(dplyr)
library(stringr)
library(fastLink)
library(readr)
library(data.table)
library(readxl)
library(here)
getwd()
trla_orig = read_excel("../../raw_workaround/Adverse_Parties_FW_TRLA.xlsx")
?read_excel
trla_orig = read_xlsx("../../raw_workaround/Adverse_Parties_FW_TRLA.xlsx")
trla_more = read_excel("../../raw_workaround/master consol = readcted 2.xls")
trla_more = read_excel("../../raw_workaround/master consol - redacted 2.xls")
View(trla_more)
sprintf("Columns in updated data pull: %s", paste(colnames(trla_more), collapse = ";"))
sprintf("Columns in original data pull: %s", paste(colnames(trla_original), collapse = ";"))
sprintf("Columns in original data pull: %s", paste(colnames(trla_orig), collapse = ";"))
clean_1 = gsub("\\s+", "_", tolower(trimws(colnames(trla_orig))))
clean_2 = gsub("\\#", "number", clean_1)
clean_3  = gsub("(?!\\_)[[:punct:]]", "", clean_2, perl = TRUE)
colnames(trla_orig) = clean_3
View(trla_orig)
?gsub
sprintf("Columns in original data pull: %s", paste(colnames(trla_orig), collapse = ";"))
sprintf("Columns in updated data pull: %s", paste(colnames(trla_more), collapse = ";"))
?rename
#Rename trla_more columns to match orig
trla_more <- trla_more %>%
rename(case_number = fileno, legal_problem_code = problem, case_disposition = appsts, intake_date = date_intrv, derived_opponent_consolidated = opponent, date_closed = date_close)
trla_orig = trla_orig %>%
group_by(case_number) %>%
mutate(is_repeated_casenum = ifelse(n() > 1, TRUE, FALSE)) %>%
ungroup()
## focus on consolidating opponent columns
#If multiple are present you’d want to separate out.
#So, if ind AP is missing, use Lead AP. You have to decide if a “count” is tied to an individual client or to a group case.
#If Lead AP is missing, that is fine, use individual case AP.
#If both are present, you could separate out into two cases for the first occurrence? Or for each depending on how you’ve decided to count.
trla_orig = trla_orig %>%
mutate(derived_opponent_consolidated = case_when(!is.na(adverse_party_organization) ~ adverse_party_organization,
is.na(adverse_party_organization) & !is.na(lead_case_ap_organization) ~ lead_case_ap_organization,
is.na(adverse_party_organization) & is.na(lead_case_ap_organization) &
!is.na(adverse_party_name) ~ adverse_party_name,
is.na(adverse_party_organization) & is.na(lead_case_ap_organization) &
is.na(adverse_party_name) & !is.na(lead_case_ap_name) ~ lead_case_ap_name,
TRUE ~ NA_character_),
derived_opponent_source = case_when(!is.na(adverse_party_organization) ~ "AP org",
is.na(adverse_party_organization) & !is.na(lead_case_ap_organization) ~ "Lead AP org",
is.na(adverse_party_organization) & is.na(lead_case_ap_organization) &
!is.na(adverse_party_name) ~ "AP name",
is.na(adverse_party_organization) & is.na(lead_case_ap_organization) &
is.na(adverse_party_name) & !is.na(lead_case_ap_name) ~ "Lead AP name",
TRUE ~ "Missing all"),
derived_is_notemp = case_when(grepl("Social Security Administration|Department of Labor|Workforce|Department|Dept|U.S. Immigration and Customs Enforcement|United States Customs and Border Protection|United States Environmental Protection Agency|United States Immigration and Naturalization Service|United States of America|Texas Attorney General|Texas Employment Commission|US Citizenship And Immigration Services", derived_opponent_consolidated) ~ TRUE,
TRUE ~  FALSE))
## focus on consolidating opponent columns
#If multiple are present you’d want to separate out.
#So, if ind AP is missing, use Lead AP. You have to decide if a “count” is tied to an individual client or to a group case.
#If Lead AP is missing, that is fine, use individual case AP.
#If both are present, you could separate out into two cases for the first occurrence? Or for each depending on how you’ve decided to count.
trla_orig = trla_orig %>%
mutate(derived_opponent_consolidated = case_when(!is.na(adverse_party_organization) ~ adverse_party_organization,
is.na(adverse_party_organization) & !is.na(lead_case_ap_organization) ~ lead_case_ap_organization,
is.na(adverse_party_organization) & is.na(lead_case_ap_organization) &
!is.na(adverse_party_name) ~ adverse_party_name,
is.na(adverse_party_organization) & is.na(lead_case_ap_organization) &
is.na(adverse_party_name) & !is.na(lead_case_ap_name) ~ lead_case_ap_name,
TRUE ~ NA_character_),
derived_opponent_source = case_when(!is.na(adverse_party_organization) ~ "AP org",
is.na(adverse_party_organization) & !is.na(lead_case_ap_organization) ~ "Lead AP org",
is.na(adverse_party_organization) & is.na(lead_case_ap_organization) &
!is.na(adverse_party_name) ~ "AP name",
is.na(adverse_party_organization) & is.na(lead_case_ap_organization) &
is.na(adverse_party_name) & !is.na(lead_case_ap_name) ~ "Lead AP name",
TRUE ~ "Missing all"),
derived_is_notemp = case_when(grepl("Social Security Administration|Department of Labor|Workforce|Department|Dept|U.S. Immigration and Customs Enforcement|United States Customs and Border Protection|United States Environmental Protection Agency|United States Immigration and Naturalization Service|United States of America|Texas Attorney General|Texas Employment Commission|US Citizenship And Immigration Services|
Texas Unemployment Commission|workforce", derived_opponent_consolidated) ~ TRUE,
TRUE ~  FALSE))
sprintf("There are %s unique case numbers, %s unique case id/lead case ids, and %s rows",
length(unique(trla_orig$case_number)),
length(unique(trla_orig$caseidlead_case_number)),
nrow(trla_orig))
sprintf("There are %s unique case numbers and %s rows in original dataset",
length(unique(trla_more$case_number)),
nrow(trla_more))
trla_orig = trla_orig %>%
group_by(case_number) %>%
mutate(is_repeated_casenum = ifelse(n() > 1, TRUE, FALSE)) %>%
ungroup()
## create flag for cases with multiple case_numbers
trla_orig = trla_orig %>%
group_by(case_number) %>%
mutate(is_repeated_casenum = ifelse(n() > 1, TRUE, FALSE)) %>%
ungroup()
## reasons for repeat:
## (1) different adverse parties (e.g., a grower and FLC)- example: case 01-105990 - address later when merging to jobs
## (2) missing addresses in one of the rows - example: 31807  address using group_by pre jobs merge (after cleaning adverse party field)
View(trla_orig %>%
filter(is_repeated_casenum) %>%
arrange(case_number))
View(trla_orig %>%
filter(is_repeated_casenum) %>%
group_by(case_number) %>%
mutate(count = n()) %>%
ungroup())
View(trla_orig %>%
filter(is_repeated_casenum) %>%
group_by(case_number) %>%
mutate(count = n()))
