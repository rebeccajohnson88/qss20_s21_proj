#BEFORE any merges, count of missing in orig
sprintf("There are %s cases with missing AP in trla_orig before merging",
trla_orig2 %>%
filter(missing_AP) %>%
length(missing_AP))
trla_more <- trla_more %>%
mutate(missing_AP = ifelse(is.na(derived_opponent_consolidated),TRUE,FALSE))
#Create flags for 'in more' & 'missing AP' in either or both
#Filter out earlier data
trla_orig2 <- trla_orig %>%
group_by(case_number) %>%
mutate(in_more = ifelse(case_number %in% trla_more$case_number, TRUE, FALSE)) %>%
ungroup() %>%
mutate(missing_AP = ifelse(is.na(derived_opponent_consolidated), TRUE, FALSE)) %>%
filter(intake_date >= ymd("2014-01-01"))
#See a count of various combinations of missing AP in orig (1) and more (2)
missing_combos <- trla_orig2 %>%
distinct(case_number,.keep_all = TRUE) %>%
bind_rows(trla_more, .id = "id") %>%
select("case_number","id","missing_AP") %>%
pivot_wider(id_cols = "case_number", names_from = "id", values_from = "missing_AP") %>%
group_by(`1`,`2`) %>%
summarise(count = n())
sprintf("There are %s case numbers across both datasets with no AP in either set. There are %s case numbers in trla_orig with a match in trla_more.",
missing_combos %>%
filter((`1` & `2`) | (`1` & is.na(`2`)) | (`2` & is.na(`1`))) %>%
ungroup() %>%
summarise(sum(count)),
missing_combos %>%
filter((`1` &!`2`)) %>%
ungroup() %>%
summarise(sum(count))
)
#BEFORE any merges, count of missing in orig
sprintf("There are %s cases with missing AP in trla_orig before merging",
trla_orig2 %>%
filter(missing_AP) %>%
length(missing_AP))
View(trla_orig2)
sprintf("There are %s cases with missing AP in trla_orig before merging",
trla_orig2 %>%
filter(missing_AP) %>%
length(missing_AP))
sprintf("There are %s cases with missing AP in trla_orig before merging",
trla_orig2 %>%
filter(missing_AP)
sprintf("There are %s cases with missing AP in trla_orig before merging",
#BEFORE any merges, count of missing in orig
sprintf("There are %s cases with missing AP in trla_orig before merging",
trla_orig2 %>%
filter(missing_AP) %>%
length(missing_AP))
trla_orig2 %>%
filter(missing_AP)
trla_orig2 %>%
filter(missing_AP) %>%
length(missing_AP)
#BEFORE any merges, count of missing in orig
sprintf("There are %s cases with missing AP in trla_orig before merging",
trla_orig2 %>%
filter(missing_AP) %>%
length("missing_AP"))
trla_more <- trla_more %>%
mutate(missing_AP = ifelse(is.na(derived_opponent_consolidated),TRUE,FALSE))
#Create flags for 'in more' & 'missing AP' in either or both
#Filter out earlier data
trla_orig2 <- trla_orig %>%
group_by(case_number) %>%
mutate(in_more = ifelse(case_number %in% trla_more$case_number, TRUE, FALSE)) %>%
ungroup() %>%
mutate(missing_AP = ifelse(is.na(derived_opponent_consolidated), TRUE, FALSE)) %>%
filter(intake_date >= ymd("2014-01-01"))
#See a count of various combinations of missing AP in orig (1) and more (2)
missing_combos <- trla_orig2 %>%
distinct(case_number,.keep_all = TRUE) %>%
bind_rows(trla_more, .id = "id") %>%
select("case_number","id","missing_AP") %>%
pivot_wider(id_cols = "case_number", names_from = "id", values_from = "missing_AP") %>%
group_by(`1`,`2`) %>%
summarise(count = n())
sprintf("There are %s case numbers across both datasets with no AP in either set. There are %s case numbers in trla_orig with a match in trla_more.",
missing_combos %>%
filter((`1` & `2`) | (`1` & is.na(`2`)) | (`2` & is.na(`1`))) %>%
ungroup() %>%
summarise(sum(count)),
missing_combos %>%
filter((`1` &!`2`)) %>%
ungroup() %>%
summarise(sum(count))
)
#BEFORE any merges, count of missing in orig
sprintf("There are %s cases with missing AP in trla_orig before merging",
trla_orig2 %>%
filter(missing_AP) %>%
length(missing_AP))
x<-trla_orig2 %>%
filter(missing_AP) %>%
length(missing_AP)
?length
#BEFORE any merges, count of missing in orig
sprintf("There are %s cases with missing AP in trla_orig before merging",
trla_orig2 %>%
filter(missing_AP)
length())
#BEFORE any merges, count of missing in orig
sprintf("There are %s cases with missing AP in trla_orig before merging",
trla_orig2 %>%
filter(missing_AP) %>%
length())
trla_orig2 %>%
filter(missing_AP)
#BEFORE any merges, count of missing in orig
sprintf("There are %s cases with missing AP in trla_orig before merging",
trla_orig2 %>%
filter(missing_AP) %>%
length(case_number))
#BEFORE any merges, count of missing in orig
sprintf("There are %s cases with missing AP in trla_orig before merging",
trla_orig2 %>%
filter(missing_AP) %>%
length(unique(case_number)))
#BEFORE any merges, count of missing in orig
sprintf("There are %s cases with missing AP in trla_orig before merging",
trla_orig2 %>%
filter(missing_AP) %>%
summarise(length(missing_AP)))
trla_more <- trla_more %>%
mutate(missing_AP = ifelse(is.na(derived_opponent_consolidated),TRUE,FALSE))
#Create flags for 'in more' & 'missing AP' in either or both
#Filter out earlier data
trla_orig2 <- trla_orig %>%
group_by(case_number) %>%
mutate(in_more = ifelse(case_number %in% trla_more$case_number, TRUE, FALSE)) %>%
ungroup() %>%
mutate(missing_AP = ifelse(is.na(derived_opponent_consolidated), TRUE, FALSE)) %>%
filter(intake_date >= ymd("2014-01-01"))
#See a count of various combinations of missing AP in orig (1) and more (2)
missing_combos <- trla_orig2 %>%
distinct(case_number,.keep_all = TRUE) %>%
bind_rows(trla_more, .id = "id") %>%
select("case_number","id","missing_AP") %>%
pivot_wider(id_cols = "case_number", names_from = "id", values_from = "missing_AP") %>%
group_by(`1`,`2`) %>%
summarise(count = n())
sprintf("There are %s case numbers across both datasets with no AP in either set. There are %s case numbers in trla_orig with a match in trla_more.",
missing_combos %>%
filter((`1` & `2`) | (`1` & is.na(`2`)) | (`2` & is.na(`1`))) %>%
ungroup() %>%
summarise(sum(count)),
missing_combos %>%
filter((`1` &!`2`)) %>%
ungroup() %>%
summarise(sum(count))
)
#BEFORE any merges, count of missing in orig
sprintf("There are %s cases with missing AP in trla_orig before merging",
trla_orig2 %>%
filter(missing_AP) %>%
summarise(length(missing_AP)))
#Follow proposed logic to join the datasets
trla_orig3 <- trla_orig2 %>%
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE))
trla_orig3 %>%
group_by(missing_AP) %>%
summarise(n())
#Follow proposed logic to join the datasets
trla_orig3 <- trla_orig2 %>%
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE))
trla_orig3 %>%
group_by(missing_AP) %>%
summarise(n())
#Follow proposed logic to join the datasets
#Step 1: case number matches, missing in orig, present in more
step1 <- trla_orig2 %>%
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE))
trla_orig3 %>%
group_by(missing_AP) %>%
summarise(n())
#Results as expected -- 199 remain in original
View(step1)
step1 <- trla_orig2 %>%
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
derived_oc_2_source = ifelse(is.na(derived_opponent_consolidated.x),"trla_more", "trla_orig"),
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE)
)
step2 <- step1 %>%
select(derived_opponent_consolidated.x, derived_opponent_consolidated.y, missing_AP.x, missing_AP.y)
step2 <- step1 %>%
select(case_number,derived_opponent_consolidated.x, derived_opponent_consolidated.y, missing_AP.x, missing_AP.y)
View(step2)
trla_more %>%
anti_join(trla_orig3)
View(missing_combos)
#See a count of various combinations of missing AP in orig (1) and more (2)
missing_combos <- trla_orig2 %>%
distinct(case_number,.keep_all = TRUE) %>%
bind_rows(trla_more, .id = "id") %>%
select("case_number","id","missing_AP") %>%
pivot_wider(id_cols = "case_number", names_from = "id", values_from = "missing_AP") %>%
group_by(`1`,`2`) %>%
summarise(count = n()) %>%
ungroup()
sprintf("There are %s case numbers across both datasets with no AP in either set. There are %s case numbers in trla_orig with a match in trla_more. There are %s case numbers in trla_more but not in trla_orig.",
missing_combos %>%
filter((`1` & `2`) | (`1` & is.na(`2`)) | (`2` & is.na(`1`))) %>%
# ungroup() %>%
summarise(sum(count)),
missing_combos %>%
filter((`1` &!`2`)) %>%
# ungroup() %>%
summarise(sum(count)),
missing_combos %>%
filter(is.na(`1`)) %>%
summarise(sum(count))
)
sprintf("There are %s case numbers across both datasets with no AP in either set. /n There are %s case numbers in trla_orig with a match in trla_more. /n There are %s case numbers in trla_more but not in trla_orig. /n There are %s cases with missing AP in trla_orig before merging.",
missing_combos %>%
filter((`1` & `2`) | (`1` & is.na(`2`)) | (`2` & is.na(`1`))) %>%
summarise(sum(count)),
missing_combos %>%
filter((`1` &!`2`)) %>%
summarise(sum(count)),
missing_combos %>%
filter(is.na(`1`)) %>%
summarise(sum(count)),
trla_orig2 %>%
filter(missing_AP) %>%
summarise(length(missing_AP))
)
sprintf("There are %s case numbers across both datasets with no AP in either set. \n There are %s case numbers in trla_orig with a match in trla_more. \n There are %s case numbers in trla_more but not in trla_orig. \n There are %s cases with missing AP in trla_orig before merging.",
missing_combos %>%
filter((`1` & `2`) | (`1` & is.na(`2`)) | (`2` & is.na(`1`))) %>%
summarise(sum(count)),
missing_combos %>%
filter((`1` &!`2`)) %>%
summarise(sum(count)),
missing_combos %>%
filter(is.na(`1`)) %>%
summarise(sum(count)),
trla_orig2 %>%
filter(missing_AP) %>%
summarise(length(missing_AP))
)
sprintf("There are %s case numbers across both datasets with no AP in either set. \r\n There are %s case numbers in trla_orig with a match in trla_more. \r\n There are %s case numbers in trla_more but not in trla_orig. \r\n There are %s cases with missing AP in trla_orig before merging.",
missing_combos %>%
filter((`1` & `2`) | (`1` & is.na(`2`)) | (`2` & is.na(`1`))) %>%
summarise(sum(count)),
missing_combos %>%
filter((`1` &!`2`)) %>%
summarise(sum(count)),
missing_combos %>%
filter(is.na(`1`)) %>%
summarise(sum(count)),
trla_orig2 %>%
filter(missing_AP) %>%
summarise(length(missing_AP))
)
sprintf("There are %s case numbers across both datasets with no AP in either set.
There are %s case numbers in trla_orig with a match in trla_more.
There are %s case numbers in trla_more but not in trla_orig.
There are %s cases with missing AP in trla_orig before merging.",
missing_combos %>%
filter((`1` & `2`) | (`1` & is.na(`2`)) | (`2` & is.na(`1`))) %>%
summarise(sum(count)),
missing_combos %>%
filter((`1` &!`2`)) %>%
summarise(sum(count)),
missing_combos %>%
filter(is.na(`1`)) %>%
summarise(sum(count)),
trla_orig2 %>%
filter(missing_AP) %>%
summarise(length(missing_AP))
)
print(sprintf("There are %s case numbers across both datasets with no AP in either set. There are %s case numbers in trla_orig with a match in trla_more. There are %s case numbers in trla_more but not in trla_orig. There are %s cases with missing AP in trla_orig before merging.",
missing_combos %>%
filter((`1` & `2`) | (`1` & is.na(`2`)) | (`2` & is.na(`1`))) %>%
summarise(sum(count)),
missing_combos %>%
filter((`1` &!`2`)) %>%
summarise(sum(count)),
missing_combos %>%
filter(is.na(`1`)) %>%
summarise(sum(count)),
trla_orig2 %>%
filter(missing_AP) %>%
summarise(length(missing_AP))
))
print(sprintf("There are %s case numbers across both datasets with no AP in either set. \n There are %s case numbers in trla_orig with a match in trla_more. There are %s case numbers in trla_more but not in trla_orig. There are %s cases with missing AP in trla_orig before merging.",
missing_combos %>%
filter((`1` & `2`) | (`1` & is.na(`2`)) | (`2` & is.na(`1`))) %>%
summarise(sum(count)),
missing_combos %>%
filter((`1` &!`2`)) %>%
summarise(sum(count)),
missing_combos %>%
filter(is.na(`1`)) %>%
summarise(sum(count)),
trla_orig2 %>%
filter(missing_AP) %>%
summarise(length(missing_AP))
))
trla_more %>%
anti_join(trla_orig2)
trla_more %>%
anti_join(trla_orig2, by = "case_number")
step3 <- trla_more %>%
anti_join(trla_orig2, by = "case_number")
trla_merge <- step1 %>%
bind_rows(step3)
View(trla_merge)
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = "case_number")
trla_merge <- trla_orig2 %>%
#join with matching case numbers in trla_more
left_join(trla_more, by = "case_number") %>%
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique) %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
derived_oc_2_source = ifelse(is.na(derived_opponent_consolidated.x),"trla_more",
"trla_orig"),
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE)
)
#Results as expected -- 199 remain in original
trla_merge %>%
group_by(missing_AP) %>%
summarise(n())
#Results as expected -- 199 remain in original
trla_merge %>%
filter(derived_oc_2_source == "trla_orig") %>%
group_by(missing_AP) %>%
summarise(n())
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = "case_number")
trla_merge <- trla_orig2 %>%
#join with matching case numbers in trla_more
left_join(trla_more, by = "case_number") %>%
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique) %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
derived_oc_2_source = ifelse((is.na(derived_opponent_consolidated.x) &
!is.na(derived_opponent_consolidated_2)),
"trla_more",
"trla_orig"),
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE)
)
trla_merge %>%
filter(derived_oc_2_source == "trla_orig") %>%
group_by(missing_AP) %>%
summarise(n())
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = "case_number")
trla_merge <- trla_orig2 %>%
#join with matching case numbers in trla_more
left_join(trla_more, by = "case_number") %>%
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique) %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
derived_oc_2_source = ifelse(is.na(derived_opponent_consolidated_2), NA,
ifelse(is.na(derived_opponent_consolidated.x),"trla_more",
"trla_orig")),
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE)
)
trla_merge %>%
filter(derived_oc_2_source)
#Results as expected -- 199 remain in original
trla_merge %>%
filter(derived_oc_2_source == "trla_orig") %>%
group_by(missing_AP) %>%
summarise(n())
#Results as expected -- 199 remain in original
trla_merge %>%
filter(is.na(derived_oc_2_source)) %>%
group_by(missing_AP) %>%
summarise(n())
View(trla_merge)
#Follow proposed logic to join the datasets
#Step 1: case number matches, missing in orig, present in more
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = "case_number")
trla_merge <- trla_orig2 %>%
#join with matching case numbers in trla_more
left_join(trla_more, by = "case_number") %>%
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
derived_oc_2_source = ifelse(is.na(derived_opponent_consolidated_2), NA,
ifelse(is.na(derived_opponent_consolidated.x),"trla_more",
"trla_orig")),
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE)
)
#Results as expected -- 199 remain in original
trla_merge %>%
filter(id == `1`) %>%
group_by(missing_AP) %>%
summarise(n())
#Results as expected -- 199 remain in original
trla_merge %>%
filter(id == "1") %>%
group_by(missing_AP) %>%
summarise(n())
View(trla_merge %>%
filter(id == "2")
)
trla_merge <- trla_orig2 %>%
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#join with matching case numbers in trla_more
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
derived_oc_2_source = ifelse(is.na(derived_opponent_consolidated_2), NA,
ifelse(is.na(derived_opponent_consolidated.x),"trla_more",
"trla_orig")),
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE)
)
View(trla_merge %>%
filter(id == "2"))
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = "case_number")
trla_merge <- trla_orig2 %>%
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#join with matching case numbers in trla_more
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
derived_oc_2_source = ifelse(is.na(derived_opponent_consolidated_2), NA,
ifelse(is.na(derived_opponent_consolidated.x),"trla_more",
"trla_orig")),
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE)
)
View(trla_merge %>%
filter(id == "2"))
#Follow proposed logic to join the datasets
#Step 1: case number matches, missing in orig, present in more
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = "case_number")
trla_merge <- trla_orig2 %>%
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#join with matching case numbers in trla_more
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
derived_oc_2_source = ifelse(is.na(derived_opponent_consolidated_2), NA, ifelse(id == "2",
"trla_more",                                                                                  ifelse(is.na(derived_opponent_consolidated.x),"trla_more","trla_orig"))),
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE)
)
View(trla_merge %>%
filter(id == "2"))
#Results as expected -- 199 remain in original
trla_merge %>%
filter(id == "1") %>%
group_by(missing_AP) %>%
summarise(n())
trla_merge %>%
group_by(missing_AP) %>%
summarise(n())
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = "case_number") %>%
filter(intake_date >= ymd("2014-01-01"))
trla_merge <- trla_orig2 %>%
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
derived_oc_2_source = ifelse(is.na(derived_opponent_consolidated_2), NA, ifelse(id == "2",
"trla_more",                                                                                  ifelse(is.na(derived_opponent_consolidated.x),"trla_more","trla_orig"))),
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE)
)
#Checking the additional rows added in the first step
View(trla_merge %>%
filter(id == "2"))
#Results as expected -- 199 remain in original
trla_merge %>%
filter(id == "1") %>%
group_by(missing_AP) %>%
summarise(n())
#Overall, we get the number of missing APs we were expecting
trla_merge %>%
group_by(missing_AP) %>%
summarise(n())
