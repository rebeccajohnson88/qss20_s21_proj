#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
#note source of AP
derived_oc_2_source = ifelse(is.na(derived_opponent_consolidated_2), NA, ifelse(id == "2",
"trla_more",                                                                                  ifelse(is.na(derived_opponent_consolidated.x),"trla_more","trla_orig"))),
#for recalculating missing APs
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE),
count_APs_more = sum(str_count(opstate.y, ","),1, na.rm = TRUE)
#ifelse(derived_oc_2_source == "trla_more", sum(str_count(opstate.y, ","),1),NA)
)
#Follow proposed logic to join the datasets
#Additional logic -- case number matches, present in orig & present in more, but diff AP
#really not sure how to do this without a clear separator for the trla_more opponent data
#just eyeballing it, does not seem like a major issue
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = "case_number") %>%
filter(intake_date >= ymd("2014-01-01"))
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
#note source of AP
derived_oc_2_source = ifelse(is.na(derived_opponent_consolidated_2), NA, ifelse(id == "2",
"trla_more",                                                                                  ifelse(is.na(derived_opponent_consolidated.x),"trla_more","trla_orig"))),
#for recalculating missing APs
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE),
count_APs_more = rowsum(str_count(opstate.y, ","),1, na.rm = TRUE)
#ifelse(derived_oc_2_source == "trla_more", sum(str_count(opstate.y, ","),1),NA)
)
#Follow proposed logic to join the datasets
#Additional logic -- case number matches, present in orig & present in more, but diff AP
#really not sure how to do this without a clear separator for the trla_more opponent data
#just eyeballing it, does not seem like a major issue
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = "case_number") %>%
filter(intake_date >= ymd("2014-01-01"))
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
#note source of AP
derived_oc_2_source = ifelse(is.na(derived_opponent_consolidated_2), NA, ifelse(id == "2",
"trla_more",                                                                                  ifelse(is.na(derived_opponent_consolidated.x),"trla_more","trla_orig"))),
#for recalculating missing APs
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE),
count_APs_more = rowSums(str_count(opstate.y, ","),1, na.rm = TRUE)
#ifelse(derived_oc_2_source == "trla_more", sum(str_count(opstate.y, ","),1),NA)
)
#Follow proposed logic to join the datasets
#Additional logic -- case number matches, present in orig & present in more, but diff AP
#really not sure how to do this without a clear separator for the trla_more opponent data
#just eyeballing it, does not seem like a major issue
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = "case_number") %>%
filter(intake_date >= ymd("2014-01-01"))
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
#note source of AP
derived_oc_2_source = ifelse(is.na(derived_opponent_consolidated_2), NA, ifelse(id == "2",
"trla_more",                                                                                  ifelse(is.na(derived_opponent_consolidated.x),"trla_more","trla_orig"))),
#for recalculating missing APs
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE),
count_APs_more = str_count(opstate.y, ",") + 1
#ifelse(derived_oc_2_source == "trla_more", sum(str_count(opstate.y, ","),1),NA)
)
#Checking the additional rows added in the first step
View(trla_merge %>%
filter(id == "2"))
#Results as expected -- 199 remain in original
trla_merge %>%
filter(id == "1") %>%
group_by(missing_AP) %>%
summarise(n())
#Overall, we get the number of missing APs we were expecting, but fewer because we filtered out pre-2014 for the unique trla_more rows
trla_merge %>%
group_by(missing_AP) %>%
summarise(n())
#Follow proposed logic to join the datasets
#Additional logic -- case number matches, present in orig & present in more, but diff AP
#really not sure how to do this without a clear separator for the trla_more opponent data
#just eyeballing it, does not seem like a major issue
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = "case_number") %>%
filter(intake_date >= ymd("2014-01-01"))
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
#note source of AP
derived_oc_2_source = ifelse(is.na(derived_opponent_consolidated_2), NA, ifelse(id == "2",
"trla_more",                                                                                  ifelse(is.na(derived_opponent_consolidated.x),"trla_more","trla_orig"))),
#for recalculating missing APs
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE),
count_AP_states.y = ifelse(derived_oc_2_source == "trla_more", str_count(opstate.y, ",") + 1,NA)
)
#Checking the additional rows added in the first step
View(trla_merge %>%
filter(id == "2"))
#Results as expected -- 199 remain in original
trla_merge %>%
filter(id == "1") %>%
group_by(missing_AP) %>%
summarise(n())
#Overall, we get the number of missing APs we were expecting, but fewer because we filtered out pre-2014 for the unique trla_more rows
trla_merge %>%
group_by(missing_AP) %>%
summarise(n())
trla_merge2 <- trla_merge %>%
separate_rows(opstate.y, sep = ",")
View(trla_merge2)
#Follow proposed logic to join the datasets
#Additional logic -- case number matches, present in orig & present in more, but diff AP
#really not sure how to do this without a clear separator for the trla_more opponent data
#just eyeballing it, does not seem like a major issue
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = c("case_number","intake_date")) %>%
filter(intake_date >= ymd("2014-01-01"))
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
#note source of AP
derived_oc_2_source = ifelse(is.na(derived_opponent_consolidated_2), NA, ifelse(id == "2",
"trla_more",                                                                                  ifelse(is.na(derived_opponent_consolidated.x),"trla_more","trla_orig"))),
#for recalculating missing APs
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE),
count_AP_states.y = ifelse(derived_oc_2_source == "trla_more", str_count(opstate.y, ",") + 1,NA)
)
#Checking the additional rows added in the first step
View(trla_merge %>%
filter(id == "2"))
#Results as expected -- 199 remain in original
trla_merge %>%
filter(id == "1") %>%
group_by(missing_AP) %>%
summarise(n())
#Overall, we get the number of missing APs we were expecting, but fewer because we filtered out pre-2014 for the unique trla_more rows
trla_merge %>%
group_by(missing_AP) %>%
summarise(n())
#Follow proposed logic to join the datasets
#Additional logic -- case number matches, present in orig & present in more, but diff AP
#really not sure how to do this without a clear separator for the trla_more opponent data
#just eyeballing it, does not seem like a major issue
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = c("case_number")) %>%
filter(intake_date >= ymd("2014-01-01"))
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
#note source of AP
derived_oc_2_source = ifelse(is.na(derived_opponent_consolidated_2), NA, ifelse(id == "2",
"trla_more",                                                                                  ifelse(is.na(derived_opponent_consolidated.x),"trla_more","trla_orig"))),
#for recalculating missing APs
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE),
count_AP_states.y = ifelse(derived_oc_2_source == "trla_more", str_count(opstate.y, ",") + 1,NA)
)
#Checking the additional rows added in the first step
View(trla_merge %>%
filter(id == "2"))
#Results as expected -- 199 remain in original
trla_merge %>%
filter(id == "1") %>%
group_by(missing_AP) %>%
summarise(n())
#Overall, we get the number of missing APs we were expecting, but fewer because we filtered out pre-2014 for the unique trla_more rows
trla_merge %>%
group_by(missing_AP) %>%
summarise(n())
#Follow proposed logic to join the datasets
#Additional logic -- case number matches, present in orig & present in more, but diff AP
#really not sure how to do this without a clear separator for the trla_more opponent data
#just eyeballing it, does not seem like a major issue
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = c("case_number" ,"intake_date")) %>%
filter(intake_date >= ymd("2014-01-01"))
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated_2 = ifelse(is.na(derived_opponent_consolidated.x),
derived_opponent_consolidated.y,
derived_opponent_consolidated.x),
#note source of AP
derived_oc_2_source = ifelse(is.na(derived_opponent_consolidated_2), NA, ifelse(id == "2",
"trla_more",                                                                                  ifelse(is.na(derived_opponent_consolidated.x),"trla_more","trla_orig"))),
#for recalculating missing APs
missing_AP = ifelse(is.na(derived_opponent_consolidated_2),TRUE,FALSE),
count_AP_states.y = ifelse(derived_oc_2_source == "trla_more", str_count(opstate.y, ",") + 1,NA)
)
#Checking the additional rows added in the first step
View(trla_merge %>%
filter(id == "2"))
#Results as expected -- 199 remain in original
trla_merge %>%
filter(id == "1") %>%
group_by(missing_AP) %>%
summarise(n())
#Overall, we get the number of missing APs we were expecting, but fewer because we filtered out pre-2014 for the unique trla_more rows
trla_merge %>%
group_by(missing_AP) %>%
summarise(n())
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = c("case_number")) %>%
filter(intake_date >= ymd("2014-01-01"))
View(trla_more)
View(trla_orig)
## focus on consolidating opponent columns
#If multiple are present you’d want to separate out.
#So, if ind AP is missing, use Lead AP. You have to decide if a “count” is tied to an individual client or to a group case.
#If Lead AP is missing, that is fine, use individual case AP.
#If both are present, you could separate out into two cases for the first occurrence? Or for each depending on how you’ve decided to count.
trla_orig = trla_orig %>%
mutate(derived_opponent_consolidated = case_when(!is.na(adverse_party_organization) ~ adverse_party_organization,
is.na(adverse_party_organization) & !is.na(lead_case_ap_organization) ~ lead_case_ap_organization,
is.na(adverse_party_organization) & is.na(lead_case_ap_organization) &
!is.na(adverse_party_name) ~ adverse_party_name,
is.na(adverse_party_organization) & is.na(lead_case_ap_organization) &
is.na(adverse_party_name) & !is.na(lead_case_ap_name) ~ lead_case_ap_name,
TRUE ~ NA_character_),
derived_opponent_source = case_when(!is.na(adverse_party_organization) ~ "AP org",
is.na(adverse_party_organization) & !is.na(lead_case_ap_organization) ~ "Lead AP org",
is.na(adverse_party_organization) & is.na(lead_case_ap_organization) &
!is.na(adverse_party_name) ~ "AP name",
is.na(adverse_party_organization) & is.na(lead_case_ap_organization) &
is.na(adverse_party_name) & !is.na(lead_case_ap_name) ~ "Lead AP name",
TRUE ~ "Missing all"),
derived_opponent_state = (case_when(!is.na(ap_state) ~ ap_state,
is.na(ap_state) ~ lead_case_ap_name,
TRUE ~ NA_character_
)),
derived_opponent_city = (case_when(!is.na(ap_city) ~ ap_city,
is.na(ap_city) ~ lead_case_ap_city,
TRUE ~ NA_character_
)),
derived_is_notemp = case_when(grepl("Social Security Administration|Department of Labor|Workforce|Department|Dept|U.S. Immigration and Customs Enforcement|United States Customs and Border Protection|United States Environmental Protection Agency|United States Immigration and Naturalization Service|United States of America|Texas Attorney General|Texas Employment Commission|US Citizenship And Immigration Services|
Texas Unemployment Commission|workforce", derived_opponent_consolidated) ~ TRUE,
TRUE ~  FALSE)) %>%
select(-c())
#Follow proposed logic to join the datasets
#Additional logic -- case number matches, present in orig & present in more, but diff AP
#really not sure how to do this without a clear separator for the trla_more opponent data
#just eyeballing it, does not seem like a major issue
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = c("case_number")) %>%
filter(intake_date >= ymd("2014-01-01"))
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated = case_when(!is.na(derived_opponent_consolidated.x) ~derived_opponent_consolidated.x,
is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.y),
#note source of AP
derived_oc_source2 = case_when(is.na(derived_opponent_consolidated) ~ NA,
is.na(derived_opponent_consolidated.x) ~ "trla_more",
id == "2" ~ "trla_more",
TRUE ~ "trla_orig"),
#derived_opponent_state = (),
#for recalculating missing APs
missing_AP = ifelse(is.na(derived_opponent_consolidated),TRUE,FALSE),
count_AP_states.y = ifelse(derived_oc_source2 == "trla_more", str_count(opstate.y, ",") + 1,NA)
)
#Follow proposed logic to join the datasets
#Additional logic -- case number matches, present in orig & present in more, but diff AP
#really not sure how to do this without a clear separator for the trla_more opponent data
#just eyeballing it, does not seem like a major issue
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = c("case_number")) %>%
filter(intake_date >= ymd("2014-01-01"))
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated = case_when(!is.na(derived_opponent_consolidated.x) ~derived_opponent_consolidated.x,
is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.y),
#note source of AP
derived_oc_source2 = case_when(is.na(derived_opponent_consolidated) ~ NA,
is.na(derived_opponent_consolidated.x) ~ "trla_more",
id == "2" ~ "trla_more"),
#TRUE ~ "trla_orig"),
#derived_opponent_state = (),
#for recalculating missing APs
missing_AP = ifelse(is.na(derived_opponent_consolidated),TRUE,FALSE),
count_AP_states.y = ifelse(derived_oc_source2 == "trla_more", str_count(opstate.y, ",") + 1,NA)
)
rlang::last_error()
View(trla_orig2)
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number")
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated = case_when(!is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.x,
is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.y))
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated = case_when(!is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.x,
is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.y),
#note source of AP
derived_oc_source2 = case_when(is.na(derived_opponent_consolidated) ~ NA,
id == "2" ~ "trla_more",
is.na(derived_opponent_consolidated.x) ~ "trla_more",
TRUE ~ "trla_orig"),
#derived_opponent_state = (),
#for recalculating missing APs
missing_AP = ifelse(is.na(derived_opponent_consolidated),TRUE,FALSE),
count_AP_states.y = ifelse(derived_oc_source2 == "trla_more", str_count(opstate.y, ",") + 1,NA)
)
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated = case_when(!is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.x,
is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.y),
#note source of AP
derived_oc_source2 = case_when(is.na(derived_opponent_consolidated) ~ NA)
trla_merge <- trla_orig2 %>%
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated = case_when(!is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.x,
is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.y),
#note source of AP
derived_oc_source2 = case_when(is.na(derived_opponent_consolidated) ~ NA,
id == "2" ~ "trla_more")
trla_merge <- trla_orig2 %>%
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated = case_when(!is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.x,
is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.y),
#note source of AP
derived_oc_source2 = case_when(is.na(derived_opponent_consolidated) ~ NA,
id == "2" ~ "trla_more",
is.na(derived_opponent_consolidated.x) ~ "trla_more")
trla_merge <- trla_orig2 %>%
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated = case_when(!is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.x,
is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.y),
#note source of AP
derived_oc_source2 = case_when(is.na(derived_opponent_consolidated) ~ NA,
id == "2" ~ "trla_more",
is.na(derived_opponent_consolidated.x) ~ "trla_more",
TRUE ~ "trla_orig")
#Follow proposed logic to join the datasets
#Additional logic -- case number matches, present in orig & present in more, but diff AP
#really not sure how to do this without a clear separator for the trla_more opponent data
#just eyeballing it, does not seem like a major issue
trla_more_unique <- trla_more %>%
#Follow proposed logic to join the datasets
#Additional logic -- case number matches, present in orig & present in more, but diff AP
#really not sure how to do this without a clear separator for the trla_more opponent data
#just eyeballing it, does not seem like a major issue
trla_more_unique <- trla_more %>%
anti_join(trla_orig2, by = c("case_number")) %>%
filter(intake_date >= ymd("2014-01-01"))
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated = case_when(!is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.x,
is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.y),
#note source of AP
derived_oc_source2 = case_when(is.na(derived_opponent_consolidated) ~ NA,
id == "2" ~ "trla_more",
is.na(derived_opponent_consolidated.x) ~ "trla_more",
TRUE ~ "trla_orig"),
#derived_opponent_state = (),
#for recalculating missing APs
missing_AP = ifelse(is.na(derived_opponent_consolidated),TRUE,FALSE),
count_AP_states.y = ifelse(derived_oc_source2 == "trla_more", str_count(opstate.y, ",") + 1,NA)
)
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated = case_when(!is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.x,
is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.y),
#note source of AP
derived_oc_source2 = case_when(is.na(derived_opponent_consolidated) ~ NA,
id == "2" ~ "trla_more",
is.na(derived_opponent_consolidated.x) ~ "trla_more",
TRUE ~ "trla_orig"))
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated = case_when(!is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.x,
is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.y),
#note source of AP
derived_oc_source2 = case_when(is.na(derived_opponent_consolidated) ~ NA,
id == "2" ~ "trla_more",
is.na(derived_opponent_consolidated.x) ~ "trla_more",
TRUE ~ "trla_orig"))
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated = case_when(!is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.x,
is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.y),
#note source of AP
derived_oc_source2 = case_when(is.na(derived_opponent_consolidated) ~ NA,
id == "2" ~ "trla_more",
is.na(derived_opponent_consolidated.x) ~ "trla_more",
TRUE ~ "trla_orig")
trla_merge <- trla_orig2 %>%
trla_merge <- trla_orig2 %>%
#If trla_more has distinct case numbers...
#Add rows of trla_more with case numbers that do not show up in trla_orig
bind_rows(trla_more_unique, .id = "id") %>%
#If case number matches across sets and opp is missing, sub 'more'
#Join with matching case numbers in trla_more to fill in missing opponent info
left_join(trla_more, by = "case_number") %>%
mutate(derived_opponent_consolidated = case_when(!is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.x,
is.na(derived_opponent_consolidated.x) ~ derived_opponent_consolidated.y)
